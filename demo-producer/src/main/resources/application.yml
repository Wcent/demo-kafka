server:
  port: 8080

logging:
  level:
    root: info
    cn.cent.demo.producer: debug

spring:
  kafka:
    bootstrap-servers:
      - localhost:9092
      - localhost:9093
#      - localhost:9094
#      - localhost:9095

    producer:
      client-id: ServiceProducer
      retries: 0
#      retries: 1
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      # acks=0 ： 生产者在成功写入消息之前不会等待任何来自服务器的响应。
      # acks=1 ： 只要集群的首领节点收到消息，生产者就会收到一个来自服务器成功响应。
      # acks=all ：只有当所有参与复制的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应。
      acks: 1

    consumer:
      client-id: ServiceConsumer
      # 该属性指定了消费者在读取一个没有偏移量的分区或者偏移量无效的情况下该作何处理：
      # latest（默认值）在偏移量无效的情况下，消费者将从最新的记录开始读取数据（在消费者启动之后生成的记录）
      # earliest ：在偏移量无效的情况下，消费者将从起始位置读取分区的记录
      auto-offset-reset: earliest
      # 关闭自动提交偏移量，手工ack
#      enable-auto-commit: false
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        # 自定义消息类对象所在包配置为反序列化可信任包
        spring.json.trusted.packages: cn.cent.demo.producer.dto

    listener:
      # 设置手工消费模式
#      ack-mode: manual
      # 在侦听器容器中运行的线程数。
      concurrency: 5